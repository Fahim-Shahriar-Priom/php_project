CREATE TABLE  "ADMIN" 
   (	"A_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"ANAME" VARCHAR2(50) NOT NULL ENABLE, 
	"GENDER" VARCHAR2(50) NOT NULL ENABLE, 
	"ADDRESS" VARCHAR2(50) NOT NULL ENABLE, 
	"PHONE" VARCHAR2(50) NOT NULL ENABLE, 
	 PRIMARY KEY ("A_ID") ENABLE
   ) ;

CREATE TABLE  "ADMIN_LOGIN" 
   (	"A_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"PASS" VARCHAR2(50) NOT NULL ENABLE, 
	 PRIMARY KEY ("A_ID") ENABLE
   ) ;
CREATE TABLE  "CUSTOMER" 
   (	"C_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"CNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"PHONE" VARCHAR2(50) NOT NULL ENABLE, 
	"CDATE" VARCHAR2(50) NOT NULL ENABLE, 
	"VALUE" NUMBER(2,0) NOT NULL ENABLE, 
	"C_LOC" VARCHAR2(50) NOT NULL ENABLE, 
	 PRIMARY KEY ("C_ID") ENABLE
   ) ;
CREATE TABLE  "FOOD" 
   (	"FNAME" VARCHAR2(20) NOT NULL ENABLE, 
	"F_ID" VARCHAR2(20) NOT NULL ENABLE, 
	"R_ID" VARCHAR2(20) NOT NULL ENABLE, 
	"PRICE" VARCHAR2(5) NOT NULL ENABLE, 
	"FDATE" VARCHAR2(20) NOT NULL ENABLE, 
	"VALUE" NUMBER(2,0) NOT NULL ENABLE, 
	 PRIMARY KEY ("F_ID") ENABLE
   ) ;

CREATE TABLE  "LOGIN" 
   (	"U_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"PASS" VARCHAR2(50) NOT NULL ENABLE, 
	 PRIMARY KEY ("U_ID") ENABLE
   ) ;
CREATE TABLE  "ORDER_" 
   (	"C_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"R_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"F_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"FPRICE" VARCHAR2(50) NOT NULL ENABLE, 
	"QUANTITY" NUMBER(3,0) NOT NULL ENABLE, 
	"ODATE" VARCHAR2(50) NOT NULL ENABLE, 
	"NUM" VARCHAR2(50) NOT NULL ENABLE
   ) ;
CREATE TABLE  "RESTAURENT" 
   (	"RNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"R_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"R_LOC" VARCHAR2(50) NOT NULL ENABLE, 
	"CDATE" VARCHAR2(50) NOT NULL ENABLE, 
	"VALUE" NUMBER(2,0) NOT NULL ENABLE, 
	 PRIMARY KEY ("R_ID") ENABLE
   ) ;

CREATE TABLE  "SUPLIER" 
   (	"S_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"SNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"SALARY" NUMBER(10,0) NOT NULL ENABLE, 
	"GENDER" VARCHAR2(50) NOT NULL ENABLE, 
	"VALUE" NUMBER(2,0) NOT NULL ENABLE, 
	"S_LOC" VARCHAR2(50) NOT NULL ENABLE, 
	"SDATE" VARCHAR2(50) NOT NULL ENABLE, 
	 PRIMARY KEY ("S_ID") ENABLE
   ) ;

CREATE OR REPLACE TRIGGER  "SUPLIER_T1" 
AFTER
update on "SUPLIER"
for each row
 WHEN (NEW.SALARY > 0) begin

DECLARE 
   sal_diff number; 
BEGIN 
   sal_diff := :NEW.salary  - :OLD.salary; 
   dbms_output.put_line('Old salary: ' || :OLD.salary); 
   dbms_output.put_line('New salary: ' || :NEW.salary); 
   dbms_output.put_line('Salary difference: ' || sal_diff); 
END;
end;
/
ALTER TRIGGER  "SUPLIER_T1" ENABLE;

CREATE TABLE  "SUPLIER_LOGIN" 
   (	"S_ID" VARCHAR2(50) NOT NULL ENABLE, 
	"PASS" VARCHAR2(50) NOT NULL ENABLE, 
	 PRIMARY KEY ("S_ID") ENABLE
   ) ;

create or replace procedure "SUP_MAX"
(a OUT NUMBER)
is
s_salary number;
begin
select max(salary) into s_salary from suplier;
a:=s_salary;
end;?